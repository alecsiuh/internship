stages:
  - build
  - clone
  - fetch

before_script: 
  - apk update && apk add git 

variables:
  SOURCE_REPO: "https://oauth2:$ACCESS_TOKEN_CM@gitlab.com/flowfactor/stages/kdg-2024-levente-alexia-ransford-flowfactor/cost-management.git"
  DESTINATION_REPO: "https://oauth2:$ACCESS_TOKEN@gitlab.com/flowfactor/stages/kdg-2024-levente-alexia-ransford-flowfactor/cost-management-api.git"
  SOURCE_BRANCH: "main"
  DESTINATION_BRANCH: "main"
  FILES_TO_FETCH: "forecasted_amazoncloudwatch_costs.csv forecasted_amazonEC2_costs.csv forecasted_amazonEKS_costs.csv forecasted_amazonS3_costs.csv forecasted_amazonVPC_costs.csv forecasted_awsConfig_costs.csv forecasted_awskms_costs.csv forecasted_compute_engine_costs.csv forecasted_kubernetes_engine_costs.csv forecasted_networking_costs.csv"

clone:
  tags:
    - ff-acs-gitlab-runner
  stage: clone
  script:
    - git config --global user.email "Alexia.cismaru@flowfactor.be"
    - git config --global user.name "Alexia Cismaru"
    - git clone --no-checkout ${SOURCE_REPO} source_repo
    - cd source_repo
    - git checkout ${SOURCE_BRANCH} -- ${FILES_TO_FETCH}
  artifacts:
    paths:
      - source_repo

fetch:
  tags:
    - ff-acs-gitlab-runner
  stage: fetch 
  dependencies:
    - clone 
  script:  
    - git config --global user.email "Alexia.cismaru@flowfactor.be"
    - git config --global user.name "Alexia Cismaru"
    - cd source_repo
    - git add ${FILES_TO_FETCH}
    - git commit -m "Forecasts"
    - git remote add destination ${DESTINATION_REPO}
    - git fetch destination
    - git rebase destination/${DESTINATION_BRANCH} || (git rebase --abort && git merge -X theirs destination/${DESTINATION_BRANCH} || git merge --allow-unrelated-histories -X theirs destination/${DESTINATION_BRANCH}) 
    - git push destination ${SOURCE_BRANCH}:${DESTINATION_BRANCH} 

build:
  tags:
    - ff-acs-gitlab-runner
  image: 
    name: gcr.io/kaniko-project/executor:v1.14.0-debug
    entrypoint: [""]
  stage: build
  services:
    - docker:dind 
  script:
    - |
      /kaniko/executor \
        --context "${CI_PROJECT_DIR}" \
        --dockerfile "${CI_PROJECT_DIR}/Dockerfile" \
        --destination "${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}" \
        --destination "${CI_REGISTRY_IMAGE}:latest" \
        --build-arg OPENAI_API_KEY=$OPENAI_API_KEY \
        --build-arg AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID \
        --build-arg AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY \
        --build-arg AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION \
        --build-arg PROJECT_ID=$PROJECT_ID 
  
  
  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - Dockerfile
    